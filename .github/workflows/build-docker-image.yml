# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: dynamic mens CI
#cache:
  #path:
   #- node_modules/

#stages:
  #- build
  #- publish_to_Docker
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]
    environment: .env 
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - name: install npm dependencies
      run: npm ci
    - name: build nodejs app
      run: npm run build --if-present
   #  run: npm test
    - name: copy enviroment variables ===============================
      run: |
          touch .env
          echo PORT=${{ .env.PORT }} >> .env
          echo NODE_ENV=${{ .env.NODE_ENV }} >> .env
          echo ADMIN_EMAIL=${{ .env.ADMIN_EMAIL }} >> .env
          echo ADMIN_USERNAME=${{ .env.ADMIN_USERNAME }} >> .env
          echo ADMIN_PASSWORD=${{ .env.ADMIN_USERNAME}} >> .env
          echo SECRET_KEY=${{ .env.SECRET_KEY }} >> .env
          echo JWT_SECRET=${{ .env.JWT_SECRET }} >> .env
          echo JWT_EXPIRATION=${{.env.JWT_EXPIRATION }}  >> .env
          echo JWT_REFRESH_EXPIRATION=${{.env.JWT_REFRESH_EXPIRATION }} >> .env
          echo ISSUER=${{.env.ISSUER }} >> .env
          echo AUDIENCE=${{.env.AUDIENCE }} >> .env
          echo GCP_MAP_API_KEY=${{.env.GCP_MAP_API_KEY }} >> .env
          echo COSMOSDB_CON=${{.env.COSMOSDB_CON }} >> .env
          echo DB_CONNECTION_CLUSTER=${{.env.DB_CONNECTION_CLUSTER }} >> .env
          echo SCHEMA_DIR_PROD=${{.env.SCHEMA_DIR_PROD }} >> .env
          echo IMAGES_UPLOAD_DIR_PROD=${{.env.IMAGES_UPLOAD_DIR_PROD }} >> .env
          echo ORIGIN_PROD=${{.env.ORIGIN_PROD }} >> .env
          echo CORES_DMAINS_PROD=${{.env.CORES_DMAINS_PROD }} >> .env
          echo STATIC_URL_PROD=${{.env.STATIC_URL_PROD }} >> .env
          cat .env
    - name: printing variable for test only ============================
      run: echo .env
    - name: moving env file to 
      run : mv .env ./client
  #==============================
  publish_to_Docker:

    runs-on: ubuntu-latest
    needs: [build]

    steps:
     - uses: actions/checkout@v3
     - name: Docker Build & Push Action
       # You may pin to the exact commit or the version.
       # uses: mr-smithers-excellent/docker-build-push@a7fe6652db5c7274374844e81692992f5a2befb9
       uses: mr-smithers-excellent/docker-build-push@v5.6
       with:
        # Name of the Docker image
        image: ${{ secrets.DOCKER_USERNAME }}/mens

        # Tags override for Docker image
        tags: latest
        # Target Docker registry
        registry: docker.io

        # Location of Dockerfile, if not Dockerfile in root directory
        #dockerfile: # optional, default is Dockerfile
        # Directory to run `docker build` from, if not project root
        #directory: # optional
        # Docker build arguments passed via --build-arg
        #buildArgs: # optional
        # Docker build labels passed via --label
        #labels: # optional
        # Docker build target passed via --target
        #target: # optional
        # Docker registry username
        username: ${{ secrets.DOCKER_USERNAME }}

        # Docker registry password
        password: ${{ secrets.DOCKER_PSSWORD }}

        # Adds latest tag to auto-generated GitOps tag
        #addLatest: true # optional, default is false

        # Suffixes a build timestamp to the branch-based Docker tag
        #addTimestamp: # optional, default is false
